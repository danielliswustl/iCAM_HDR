function XYZ_adapt = Cat_hdr(image, whitepoint)% function cat_hdr(image, whitepoint)%% written by: lawrence taplin and garrett m. johnson%% perform a high-dynamic range chromatic adaptation transform% for the iCAM image appearance model.%% Note: this isn't so much a chromatic adaptation as a luminance% adaptation, since we are normalizing all the tristimulus% values with a single number (Y).%% Last modified: 01/31/02%% First things first...define the XYZ to RGB transformM = [ [0.7328,  0.4296, -0.1624];...        [-0.7036, 1.6974,  0.0061];...        [ 0.0030, 0.0136,  0.9834] ]';Mi = inv(M);% set teh whitepoint for D65, as that is where "IPT" is % definedxyz_d65 = [ 95.05,  100.0, 108.88];  RGB_image = changeColorSpace(image, M);RGB_white = changeColorSpace(whitepoint, M);% do a little normalization on the unitsRGB_white = RGB_white*max(RGB_image(:))/max(RGB_white(:));RGB_d65 = changeColorSpace(xyz_d65, M );% uncomment the following line to use the incomplete adaptation% from CIECAM02%%D = F - ( F / (1 + 2*(luminance^1.0/4.0) + (luminance^2.0)/300.0 ) )% otherwise, manually set a degree of adaptation, such as 0.1 for% 10 percentD = 0.0;% perform the chromatic adaptationRc = (D * RGB_d65(1)./ RGB_white(:,:,1)+ 1 - D) .* RGB_image(:,:,1);Gc = (D * RGB_d65(2)./ RGB_white(:,:,2)+ 1 - D) .* RGB_image(:,:,2);Bc = (D * RGB_d65(3)./ RGB_white(:,:,3)+ 1 - D) .* RGB_image(:,:,3);imSize = size(image);xDim = imSize(2);yDim = imSize(1);adaptImage = zeros(yDim, xDim,3);adaptImage(:,:,1) = Rc;adaptImage(:,:,2) = Gc;adaptImage(:,:,3) = Bc;	XYZ_adapt = changeColorSpace(adaptImage, Mi);